doctype html
html(lang="en")
  head
    title Find a Partner - PulsePals
    style
      include ./assets/users.css
  body
    nav
      .container
        h2 Pulsepals
        ul
          li
            a(href="/") Home
          li
            a(href="/about") About
          li
            a(href="/events") Events
          li
            a(href="/users") Find a Partner
          li
            a(href="/report") Safety and reports
        .right
          if user
            a(href="/profile")= user.username
            a(href="/logout", class="btn btn-primary") Logout
          else
            a(href="/profile")= user.username
            a(href="/logout", class="btn btn-primary") Logout

    .users-container
      h1 Find Your Perfect Fitness Partner
      
      .search-filter
        form(method="get", action="/users")
          input(type="text", name="search", placeholder="Search by name or interests", value=searchQuery || '')
          select(name="fitnessLevel")
            option(value="") All Levels
            option(value="beginner", selected=fitnessLevelFilter === 'beginner') Beginner
            option(value="intermediate", selected=fitnessLevelFilter === 'intermediate') Intermediate
            option(value="advanced", selected=fitnessLevelFilter === 'advanced') Advanced
          button(type="submit") Find Partners
      
      if users.length > 0
        .users-grid
          each user in users
            .user-card
              .user-avatar
                img(src=user.avatar, alt=`${user.firstName}'s avatar`)
              .user-info
                h3 #{user.firstName} #{user.lastName}
                p.username @#{user.username}
                if user.fitnessLevel
                  p.fitness-level
                    span.label Fitness Level: 
                    span.value(class=user.fitnessLevel) #{user.fitnessLevel.charAt(0).toUpperCase() + user.fitnessLevel.slice(1)}
                if user.interests
                  p.interests
                    span.label Interests: 
                    span.value #{user.interests}
                .user-stats
                  .stat
                    span.count #{user.friendsCount || 0}
                    span.label Friends
                .user-actions
                  a(href=`/profile/${user.id}`, class="btn btn-view") View Profile
                  if currentUser && currentUser.id !== user.id
                    if user.isFriend
                      button(class="btn btn-remove-friend", data-user-id=user.id) Remove Friend
                    else if user.friendRequestSent
                      button(class="btn btn-pending") Request Sent
                    else if user.friendRequestReceived
                      button(class="btn btn-accept", data-user-id=user.id) Accept Request
                    else
                      button(class="btn btn-add-friend", data-user-id=user.id) Add Friend
      else
        p.no-results No partners found matching your criteria.

    script.
      document.addEventListener('DOMContentLoaded', function() {
        // Friend request handling
        document.querySelectorAll('.btn-add-friend').forEach(button => {
          button.addEventListener('click', async function() {
            const userId = this.dataset.userId;
            try {
              const response = await fetch(`/users/${userId}/friend`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              });
              
              if (response.ok) {
                location.reload();
              } else {
                alert('Failed to send friend request');
              }
            } catch (error) {
              console.error('Error:', error);
              alert('An error occurred');
            }
          });
        });

        // Accept friend request
        document.querySelectorAll('.btn-accept').forEach(button => {
          button.addEventListener('click', async function() {
            const userId = this.dataset.userId;
            try {
              const response = await fetch(`/users/${userId}/friend/accept`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              });
              
              if (response.ok) {
                location.reload();
              } else {
                alert('Failed to accept friend request');
              }
            } catch (error) {
              console.error('Error:', error);
              alert('An error occurred');
            }
          });
        });

        // Remove friend
        document.querySelectorAll('.btn-remove-friend').forEach(button => {
          button.addEventListener('click', async function() {
            const userId = this.dataset.userId;
            if (confirm('Are you sure you want to remove this friend?')) {
              try {
                const response = await fetch(`/users/${userId}/friend`, {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });
                
                if (response.ok) {
                  location.reload();
                } else {
                  alert('Failed to remove friend');
                }
              } catch (error) {
                console.error('Error:', error);
                alert('An error occurred');
              }
            }
          });
        });
      });